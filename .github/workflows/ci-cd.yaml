name: Deploy to Azure Kubernetes Service

on:
    push:
        branches:
            - main
        paths:
            - 'terraform/**'  # Listens for changes in the 'terraform' folder
            - 'kubernetes/*.yaml'  # Listens for changes in the 'kubernetes' folder
            - 'kubernetes/sock-shop-monitoring/**'  # Listens for changes in the 'kubernetes/sock-shop-monitoring' folder
    workflow_dispatch:

jobs:
    Test:
        # validates the format and correcttness of the Kubernetes manifests
        runs-on: ubuntu-latest
        steps:
        -   name: Checkout
            uses: actions/checkout@v3
        -   name: Install Kubeval
            run: |
                curl -sSL https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar -xz
                sudo mv kubeval /usr/local/bin/kubeval

        -   name: Validate Kubernetes manifests
            run: kubeval --ignore-missing-schemas kubernetes/*.yaml

    
    Infrastructure:
        # deploys or updates the infrastructure using Terraform, ignores if theee was no change to infrastructure configuration
        runs-on: ubuntu-latest
        env:
             ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
             ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
             ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
             ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        steps:
        -   name: Checkout code
            uses: actions/checkout@v3
      
        -   name: Set up Terraform
            uses: hashicorp/setup-terraform@v2
            with:
              terraform_version: '1.9.3'            
      
        -   name: Initialize Terraform
            working-directory: ./terraform 
            run: terraform init
      
        -   name: Terraform Plan
            id: tf_plan
            working-directory: ./terraform
            run: |
              terraform plan -detailed-exitcode -out=plan.tfplan \
                -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
                -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
                -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
                -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}"

              echo "exit_code=$?" >> $GITHUB_ENV

        -   name: Check Plan Status
            id: check_plan_status
            run: |
              echo "Exit code: ${{ env.exit_code }}"
              if [ "$exit_code" -eq 0 ]; then
                echo "No changes detected. Skipping apply."
                exit 0
              elif [ "$exit_code" -eq 2 ]; then
                echo "Changes detected. Proceeding with apply."
              else
                echo "Error during plan. Exiting."
                exit 1
              fi
            env:
              exit_code: ${{ env.exit_code }}

        -   name: Terraform Apply
            
            working-directory: ./terraform
            run: |
              terraform apply --auto-approve plan.tfplan \
                -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
                -var="client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" \
                -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
                -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}"

    Deploy:
        # deploys the application to Kubernetes cluster, this could include changes to parts of the configuration files.
        # changes like number of pods, memory, cpu, ingress, monitoring and alert configurations etc. 
        runs-on: ubuntu-latest
        needs: [Test, Infrastructure]
        steps:
        -   name: Checkout
            uses: actions/checkout@v3

        -   name: Setup Kubectl
            uses: azure/aks-set-context@v1
            with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}
                cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
                resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

        -   name: Install Helm
            run: |
                curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
                chmod 700 get_helm.sh
                ./get_helm.sh

        -   name: Check if cert-manager is installed
            id: check-cert-manager
            run: |
                if kubectl get pods --namespace cert-manager | grep cert-manager; then
                 echo "cert-manager is already installed"
                 echo "install=false" >> $GITHUB_ENV
                else
                 echo "cert-manager is not installed"
                 echo "install=true" >> $GITHUB_ENV
                fi

        -   name: Install CertManager
            if: env.install == 'true'
            run: |
                kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.2/cert-manager.crds.yaml
                helm repo add jetstack https://charts.jetstack.io
                helm repo update
                helm install cert-manager --namespace cert-manager --version v1.15.2 jetstack/cert-manager
        
        -   name: Deploy to Kubernetes
            run: |
              ls kubernetes/*.yaml | xargs -n 1 kubectl apply -f
              ls kubernetes/sock-shop-monitoring/*.yaml | xargs -n 1 kubectl apply -f

    Validate:
        # runs tests to verify the deployment
        runs-on: ubuntu-latest
        needs: [Deploy]
        steps:
        -   name: Set up kubectl
            uses: azure/setup-kubectl@v3
            with:
                version: 'v1.24.0'

        -   name: Setup Kubectl
            uses: azure/aks-set-context@v1
            with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}
                cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
                resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

        -   name: Check if all application pods are running
            run: |
              kubectl get pods --namespace your-namespace -o jsonpath='{.items[*].status.phase}' | grep -v Running && exit 1 || echo "All pods are running"
              

        -   name: Validate Ingress routes
            run: |
              curl -I https://capstone.utibeokon.me/
              curl -I https://prometheus.utibeokon.me/

